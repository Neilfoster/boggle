{"filter":false,"title":"boggle.py","tooltip":"/boggle.py","undoManager":{"mark":19,"position":19,"stack":[[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["d"],"id":1},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["e"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["f"]}],[{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":[" "],"id":2},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":["m"]},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":["a"]},{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"insert","lines":["k"]},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":[")"],"id":3}],[{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"remove","lines":[")"],"id":4}],[{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":["_"],"id":5}],[{"start":{"row":0,"column":4},"end":{"row":0,"column":9},"action":"remove","lines":["make_"],"id":6},{"start":{"row":0,"column":4},"end":{"row":0,"column":13},"action":"insert","lines":["make_grid"]}],[{"start":{"row":0,"column":13},"end":{"row":0,"column":15},"action":"insert","lines":["()"],"id":7}],[{"start":{"row":0,"column":14},"end":{"row":0,"column":15},"action":"insert","lines":["w"],"id":8},{"start":{"row":0,"column":15},"end":{"row":0,"column":16},"action":"insert","lines":["i"]},{"start":{"row":0,"column":16},"end":{"row":0,"column":17},"action":"insert","lines":["d"]},{"start":{"row":0,"column":17},"end":{"row":0,"column":18},"action":"insert","lines":["t"]},{"start":{"row":0,"column":18},"end":{"row":0,"column":19},"action":"insert","lines":["h"]}],[{"start":{"row":0,"column":19},"end":{"row":0,"column":20},"action":"remove","lines":[")"],"id":9},{"start":{"row":0,"column":18},"end":{"row":0,"column":19},"action":"remove","lines":["h"]},{"start":{"row":0,"column":17},"end":{"row":0,"column":18},"action":"remove","lines":["t"]},{"start":{"row":0,"column":16},"end":{"row":0,"column":17},"action":"remove","lines":["d"]},{"start":{"row":0,"column":15},"end":{"row":0,"column":16},"action":"remove","lines":["i"]},{"start":{"row":0,"column":14},"end":{"row":0,"column":15},"action":"remove","lines":["w"]},{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"remove","lines":["("]},{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"remove","lines":["d"]},{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"remove","lines":["i"]},{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"remove","lines":["r"]},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"remove","lines":["g"]},{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"remove","lines":["_"]},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"remove","lines":["e"]},{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"remove","lines":["k"]},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"remove","lines":["a"]},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"remove","lines":["m"]},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"remove","lines":[" "]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"remove","lines":["f"]},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"remove","lines":["e"]}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["d"],"id":10},{"start":{"row":0,"column":0},"end":{"row":6,"column":32},"action":"insert","lines":["def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): ' ' for row in range(height)","        for col in range(width)}"]}],[{"start":{"row":0,"column":0},"end":{"row":6,"column":32},"action":"remove","lines":["def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): ' ' for row in range(height)","        for col in range(width)}"],"id":11}],[{"start":{"row":0,"column":0},"end":{"row":11,"column":32},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}"],"id":12}],[{"start":{"row":0,"column":0},"end":{"row":11,"column":32},"action":"remove","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}"],"id":13}],[{"start":{"row":0,"column":0},"end":{"row":52,"column":21},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours"],"id":14}],[{"start":{"row":0,"column":0},"end":{"row":52,"column":21},"action":"remove","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours"],"id":15}],[{"start":{"row":0,"column":0},"end":{"row":92,"column":45},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in dictionary:","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]"],"id":16}],[{"start":{"row":92,"column":45},"end":{"row":93,"column":0},"action":"insert","lines":["",""],"id":17},{"start":{"row":93,"column":0},"end":{"row":93,"column":8},"action":"insert","lines":["        "]},{"start":{"row":93,"column":8},"end":{"row":94,"column":0},"action":"insert","lines":["",""]},{"start":{"row":94,"column":0},"end":{"row":94,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":94,"column":8},"end":{"row":95,"column":0},"action":"insert","lines":["",""],"id":18},{"start":{"row":95,"column":0},"end":{"row":95,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":95,"column":8},"end":{"row":109,"column":0},"action":"insert","lines":["def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(3, 3)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()",""],"id":19}],[{"start":{"row":95,"column":4},"end":{"row":95,"column":8},"action":"remove","lines":["    "],"id":20},{"start":{"row":95,"column":0},"end":{"row":95,"column":4},"action":"remove","lines":["    "]}]]},"ace":{"folds":[],"scrolltop":1161.5,"scrollleft":0,"selection":{"start":{"row":95,"column":0},"end":{"row":95,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":71,"state":"start","mode":"ace/mode/python"}},"timestamp":1565446075462,"hash":"aee2049795d8d4a19c1a01829fb61cd6cd72791d"}